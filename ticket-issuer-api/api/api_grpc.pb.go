// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketIssuerClient is the client API for TicketIssuer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketIssuerClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	IssueTicket(ctx context.Context, in *IssueTicketRequest, opts ...grpc.CallOption) (*IssueTicketResponse, error)
}

type ticketIssuerClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketIssuerClient(cc grpc.ClientConnInterface) TicketIssuerClient {
	return &ticketIssuerClient{cc}
}

func (c *ticketIssuerClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/api.TicketIssuer/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketIssuerClient) IssueTicket(ctx context.Context, in *IssueTicketRequest, opts ...grpc.CallOption) (*IssueTicketResponse, error) {
	out := new(IssueTicketResponse)
	err := c.cc.Invoke(ctx, "/api.TicketIssuer/IssueTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketIssuerServer is the server API for TicketIssuer service.
// All implementations must embed UnimplementedTicketIssuerServer
// for forward compatibility
type TicketIssuerServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	IssueTicket(context.Context, *IssueTicketRequest) (*IssueTicketResponse, error)
	mustEmbedUnimplementedTicketIssuerServer()
}

// UnimplementedTicketIssuerServer must be embedded to have forward compatible implementations.
type UnimplementedTicketIssuerServer struct {
}

func (UnimplementedTicketIssuerServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedTicketIssuerServer) IssueTicket(context.Context, *IssueTicketRequest) (*IssueTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTicket not implemented")
}
func (UnimplementedTicketIssuerServer) mustEmbedUnimplementedTicketIssuerServer() {}

// UnsafeTicketIssuerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketIssuerServer will
// result in compilation errors.
type UnsafeTicketIssuerServer interface {
	mustEmbedUnimplementedTicketIssuerServer()
}

func RegisterTicketIssuerServer(s grpc.ServiceRegistrar, srv TicketIssuerServer) {
	s.RegisterService(&TicketIssuer_ServiceDesc, srv)
}

func _TicketIssuer_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketIssuerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TicketIssuer/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketIssuerServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketIssuer_IssueTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketIssuerServer).IssueTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TicketIssuer/IssueTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketIssuerServer).IssueTicket(ctx, req.(*IssueTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketIssuer_ServiceDesc is the grpc.ServiceDesc for TicketIssuer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketIssuer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TicketIssuer",
	HandlerType: (*TicketIssuerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _TicketIssuer_Health_Handler,
		},
		{
			MethodName: "IssueTicket",
			Handler:    _TicketIssuer_IssueTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
